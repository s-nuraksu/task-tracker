generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]   
  role          Role     @default(USER)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?         
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  dueDate     DateTime?        
  priority    Priority  @default(medium) 
  department  String?          
  customer    String?          
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  files       File[]
}

enum Priority {
  low
  medium
  high
  urgent
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  size      Int
  type      String
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}